#!/bin/bash

# Set project name
PROJECT_NAME="./"
echo "📁 Creating project structure..."

# Create project folder and subfolders
mkdir -p $PROJECT_NAME/src/{helper,config,controllers,models,routes,middlewares,services,utils,validations,uploads,api-docs}
cd $PROJECT_NAME

# Initialize Node.js project and install dependencies
echo "🚀 Initializing Node.js project and installing dependencies..."
npm init -y

# Install necessary dependencies
npm install express mongoose body-parser cors moment dotenv morgan bcryptjs jsonwebtoken multer joi winston swagger-autogen swagger-jsdoc swagger-ui-express helmet express-rate-limit crypto

# Install development dependencies
npm install --save-dev nodemon

# Create the basic files

# src/config/database.js
echo "📂 Creating database configuration file..."
cat > src/config/database.js <<EOL
const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log("🌍 MongoDB Connected...");
  } catch (err) {
    console.error("❌ MongoDB connection error", err);
    process.exit(1);
  }
};

module.exports = connectDB;
EOL

# src/config/config.js
echo "📂 Creating environment variables file..."
cat > src/config/config.js <<EOL
require('dotenv').config({ path: '../.env' });

module.exports = {
  JWT_SECRET: process.env.JWT_SECRET,
  MONGO_URI: process.env.MONGO_URI,
  PORT: process.env.PORT || 3000,
  BASE_PATH:'/api',
};
EOL


# src/helper/helper.js
echo "📂 Creating Helper file..."
cat > src/helper/helper.js <<EOL
const crypto = require('crypto');

// Generate a random string (e.g., 32 bytes)
const randomData = crypto.randomBytes(32).toString('hex'); // Random 256-bit string

// Create SHA-256 hash from the random data
const hash = crypto.createHash('sha256')
                   .update(randomData)
                   .digest('hex'); // This returns a 64-character string (256-bit in hexadecimal)

// console.log('Random Data:', randomData);
console.log('cry :', hash);

EOL



# src/helper/mongoHelper.js
echo "📂 Creating Helper file mongo..."

URL="https://devshamseer.github.io/node-js-express-installer/mongodb_qery.js"

# Target directory
TARGET_DIR="src/helper"
# Use curl to download the file to the target directory
curl -o "$TARGET_DIR/mongodb_qery.js$( $URL)" "$URL"









# src/utils/logger.js (Logging utility using winston)
echo "📂 Creating logging utility..."
cat > src/utils/logger.js <<EOL
const winston = require('winston');

// Custom log format to handle errors and include stack traces
const { combine, timestamp, json, printf } = winston.format;

const customErrorFormat = printf(({ timestamp, level, message, error }) => {
  // Check if the log is an error and include stack trace
  if (level === 'error' && error instanceof Error) {
    return JSON.stringify({
      timestamp,
      level,
      message,
      error: {
        message: error.message,
        stack: error.stack,
      }
    });
  }
  return JSON.stringify({
    timestamp,
    level,
    message,
  });
});

const logger = winston.createLogger({
  level: 'info', // Default log level
  format: combine(
    timestamp(),  // Add timestamp to logs
    customErrorFormat // Use custom error format to handle errors properly
  ),
  transports: [
    new winston.transports.Console(), // Output logs to console
    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }), // Write error logs to a file
    new winston.transports.File({ filename: 'logs/combined.log' }) // Write all logs to a combined file
  ],
});

module.exports = logger;
EOL

# src/utils/dateFormatter.js (Date formatting utility using moment)
echo "📂 Creating date formatting utility..."
cat > src/utils/dateFormatter.js <<EOL
const moment = require('moment');

// Format date using moment.js
const formatDate = (date) => moment(date).format('YYYY-MM-DD HH:mm:ss');

module.exports = { formatDate };
EOL

# src/validations/userValidation.js (User registration & login validation)
echo "📂 Creating user validation file using Joi..."
cat > src/validations/userValidation.js <<EOL
const Joi = require('joi');

// Register validation schema
const registerValidation = Joi.object({
  name: Joi.string().min(3).max(30).required(),
  email: Joi.string().email().required(),
  password: Joi.string().min(6).required(),
});

// Login validation schema
const loginValidation = Joi.object({
  email: Joi.string().email().required(),
  password: Joi.string().min(6).required(),
});

module.exports = { registerValidation, loginValidation };
EOL

# src/middlewares/errorHandler.js (Global error handling middleware)
echo "📂 Creating global error handler middleware..."
cat > src/middlewares/errorHandler.js <<EOL
const logger = require('../utils/logger');

const errorHandler = (err, req, res, next) => {
  logger.error(err.message, { stack: err.stack });

  const statusCode = res.statusCode ? res.statusCode : 500;
  res.status(statusCode).json({
    message: err.message,
    stack: process.env.NODE_ENV === 'production' ? null : err.stack,
  });
};

module.exports = errorHandler;
EOL

# src/middlewares/authMiddleware.js (Authentication middleware)
echo "📂 Creating authentication middleware..."
cat > src/middlewares/authMiddleware.js <<EOL
const jwt = require('jsonwebtoken');
const config = require('../config/config');

module.exports = (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');

  if (!token) {
    return res.status(401).json({ msg: 'No token, authorization denied' });
  }

  try {
    const decoded = jwt.verify(token, config.JWT_SECRET);
    req.userId = decoded.userId;
    next();
  } catch (err) {
    console.error(err);
    res.status(401).json({ msg: 'Token is not valid' });
  }
};
EOL

# src/services/userService.js (Business logic layer)
echo "📂 Creating user service for business logic..."
cat > src/services/userService.js <<EOL
const User = require('../models/User'); // Ensure this path is correct
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const config = require('../config/config');

// Register user
const registerUser = async (name, email, password) => {
  const userExists = await User.findOne({ email });

  if (userExists) {
    throw new Error('User already exists');
  }

  const salt = await bcrypt.genSalt(10);
  const hashedPassword = await bcrypt.hash(password, salt);

  const newUser = new User({ name, email, password: hashedPassword });
  await newUser.save();

  return newUser;
};

// Login user
const loginUser = async (email, password) => {
  const user = await User.findOne({ email });
  if (!user) {
    throw new Error('Invalid credentials');
  }

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) {
    throw new Error('Invalid credentials');
  }

  const payload = { userId: user._id };
  const token = jwt.sign(payload, config.JWT_SECRET, { expiresIn: '1h' });

  return token;
};

module.exports = { registerUser, loginUser };
EOL

# src/controllers/userController.js (Controller to handle API requests)
echo "📂 Creating user controller..."
cat > src/controllers/userController.js <<EOL
const logger = require('../utils/logger');
const { formatDate } = require('../utils/dateFormatter');
const userService = require('../services/userService');
const { registerValidation, loginValidation } = require('../validations/userValidation');
const User = require('../models/User');

// Register User
exports.register = async (req, res) => {
  const { name, email, password } = req.body;

  try {
    // Validate input
    const { error } = registerValidation.validate({ name, email, password });
    if (error) {
      return res.status(400).json({ msg: error.details[0].message });
    }

    // Register user
    const newUser = await userService.registerUser(name, email, password);
    logger.info('User registered successfully');
    res.status(201).json({ msg: 'User registered successfully', user: newUser });

  } catch (err) {
    // Check for user already exists error
    if (err.message === 'User already exists') {
      return res.status(400).json({ msg: 'User already exists' });
    }

    // Log any other error
    logger.error(err);
    res.status(500).json({ msg: 'Server error' });
  }
};


// Login User
exports.login = async (req, res) => {
  const { email, password } = req.body;

  try {
    // Validate input
    const { error } = loginValidation.validate({ email, password });
    if (error) {
      return res.status(400).json({ msg: error.details[0].message });
    }

    // Login user
    const token = await userService.loginUser(email, password);
    logger.info();
    res.json({ token });
  } catch (err) {
    logger.error();
    res.status(500).json({ msg: 'Server error' });
  }
};

// Get user profile (Ensure this method exists)
exports.getUserProfile = async (req, res) => {
  try {
    const user = await User.findById(req.userId);
    if (!user) {
      return res.status(404).json({ msg: 'User not found' });
    }
    res.json({
      name: user.name,
      email: user.email,
      date: user.date,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ msg: 'Server error' });
  }
};
EOL

# src/models/User.js (User model)
echo "📂 Creating user model..."
cat > src/models/User.js <<EOL
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },
  date: {
    type: Date,
    default: Date.now,
  },
});

module.exports = mongoose.model('User', userSchema);
EOL

# src/routes/userRoutes.js (User routes)
echo "📂 Creating user routes..."
cat > src/routes/userRoutes.js <<EOL
const express = require('express');
const userRoute = express.Router();
const userController = require('../controllers/userController');
const authMiddleware = require('../middlewares/authMiddleware');

// Register route
userRoute.post('/register', userController.register);

// Login route
userRoute.post('/login', userController.login);

// Profile route (ensure you have this function in the controller)
userRoute.get('/profile', authMiddleware, userController.getUserProfile);

module.exports = userRoute;

EOL

# src/routes/router.js (Main Routes)
echo "📂 Creating Main Router ..."
cat > src/routes/router.js <<EOL
const express = require('express');
const userRoute = require('./userRoutes');
const mainRouter = express.Router();
mainRouter.use('/users',userRoute);

module.exports = mainRouter;
EOL

# src/api-docs/swagger.js (Swagger setup file inside api-docs folder)
echo "📂 Creating Swagger setup file inside api-docs folder..."
cat > src/api-docs/swagger.js <<EOL
const swaggerAutogen = require('swagger-autogen')();
const path = require('path');
const config = require('./../config/config');

const doc = {
  info: {
    title: 'My Node API',
    description: 'API Documentation for My Node App',
  },
  host: \`localhost:\${config.PORT}\`,
  basePath: "/api",
  schemes: ['http'],
};

const outputFile = path.join(__dirname, 'swagger.json');
const endpointsFiles = [path.join(__dirname, '../routes/router.js')];

swaggerAutogen(outputFile, endpointsFiles, doc).then(() => {
  console.log('Swagger documentation generated.');
});
EOL

# src/api-docs/swagger.json (Swagger JSON file will be generated automatically by swagger.js)
echo "📂 Creating Swagger JSON file placeholder (this will be auto-generated)..."
cat > src/api-docs/swagger.json <<EOL
{
  "swagger": "2.0",
  "info": {
    "title": "My Node API",
    "description": "API Documentation for My Node App"
  },
  "host": "localhost:3000",
  "schemes": ["http"]
}
EOL

# src/app.js (Main application file with Swagger UI)
echo "📂 Updating main application file to serve Swagger UI..."
cat > src/app.js <<EOL
require('dotenv').config({ path: '../.env' });

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const morgan = require('morgan');
const connectDB = require('./config/database');
const userRoutes = require('./routes/userRoutes');
const errorHandler = require('./middlewares/errorHandler');
const logger = require('./utils/logger');
const swaggerUi = require('swagger-ui-express');
const swaggerDocument = require('./api-docs/swagger.json'); // Automatically generated Swagger JSON
const config = require('./config/config');
const mainRouter = require('./routes/router');
const app = express();

const helmet = require('helmet');
const rateLimit = require('express-rate-limit');


// Rate limiter configuration (e.g., max 100 requests per 15 minutes per IP)
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 1000, // ✅ only allow 1000 requests per 15 minutes per IP
  standardHeaders: true,   // return RateLimit-* headers
  legacyHeaders: false,    // disable X-RateLimit-* headers
  message: {
    status: 429,
    error: 'Too many requests, please try again after 15 minutes.',
  },
});
 

// Middleware
app.use(cors());
app.use(morgan('dev'));
app.use(bodyParser.json());
// Helmet for securing HTTP headers
app.use(helmet());

//  Rate limiter to all requests
app.use(limiter);


// Connect to MongoDB
connectDB();

// Routes
app.use('/api',mainRouter);

// Serve Swagger UI
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));

// Default route
app.get('/', (req, res) => {
  res.send('Hello World');
});

// Error handler middleware
app.use(errorHandler);

module.exports = app;
EOL

# src/server.js (Server entry point with Swagger generation)
echo "📂 Updating server entry file..."
cat > src/server.js <<EOL
require('dotenv').config({ path: '../.env' });

const app = require('./app');
const config = require('./config/config');
require('./api-docs/swagger');  // Generate swagger JSON before starting the server

app.listen(config.PORT, () => {
  console.log(\`🚀 Server running on port \${config.PORT}\`);
});
EOL

# .env file (Environment variables)
echo "📂 Creating .env file..."
cat > .env <<EOL
MONGO_URI=mongodb://localhost:27017/mydatabase
JWT_SECRET=your_secret_key_here
PORT=3000
EOL

# .gitignore (Ignore node_modules and uploads)
echo "📂 Creating .gitignore file..."
cat > .gitignore <<EOL
node_modules/
uploads/
.env
EOL

echo "📂 Creating commands.sh file..."
cat > commands.sh <<EOL
"swaggerStart":"node ./src/api-docs/swagger.js"
EOL


# Start the application with Nodemon
echo "🚀 Starting the application with nodemon..."
cd src
node server.js

